vec3 totalDiffuse = vec3(0.0);
vec3 totalSpecular = vec3(0.0);

for(int i = 0; i < lightCount; i++)
{
	float distance = length(vToLightVector[i]);
	float attFactor = attenuation[i].x + 
            (attenuation[i].y * distance) + 
            (attenuation[i].z * distance * distance);
	vec3 unitToLightVector = 
            normalize(vToLightVector[i]);
	float nDotl = dot(unitNormal,unitToLightVector);
	float brightness = max(nDotl, 0.0);
	vec3 lightDirection = -unitToLightVector;
	vec3 reflectedLightDirection = 
            reflect(lightDirection, unitNormal);
	float specularFactor = 
            dot(reflectedLightDirection, 
            unitToCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, 
            shineDamper);
	totalDiffuse = totalDiffuse + 
            (brightness * lightColor[i]) / attFactor;
	totalSpecular = totalSpecular + (dampedFactor * 
            reflectivity * lightColor[i]) / attFactor;
}
totalDiffuse = max(totalDiffuse, 0.1);