#version 430 

in vec2 vTexCoordsFrag;
in vec3 vSurfaceNormal;
in vec3 vToLightVector;
in vec3 vToCameraVector;

out vec4 vColor;

uniform sampler2D textureSampler;
uniform vec3 vLightColor;
uniform float fShineDamper;
uniform float fReflectivity;

void main()
{
    //znormalizowanie wektorów
    vec3 unitNormal = normalize(vSurfaceNormal);
    vec3 unitToLightVector = normalize(vToLightVector);
    vec3 unitVectorToCamera = normalize(vToCameraVector);

    //iloczyn skalarny normalnej powierzchni
    //i wektora skierowanego do źródła światła
    float dotProd = dot(unitNormal, unitToLightVector);

    //zamiana ujemnych wartości na 0
    float brightness = max(dotProd, 0.0);

    //uwzględnienie koloru światła
    vec3 diffuse = brightness * vLightColor;

    //odwrócenie zwrotu wektora
    vec3 lightDirection = -unitToLightVector;

    //wyliczenie kierunku światła odbitego
    vec3 reflectedLightDirection = reflect(lightDirection, 
        unitNormal);

    //iloczyn skalarny wektora światła odbitego
    //i wektora skierowanego w stronę kamery
    float specularFactor = dot(reflectedLightDirection, 
        unitVectorToCamera);

    //zamiana ujemnych wartości na 0
    specularFactor = max(specularFactor, 0.0);

    //czynnik tłumienia światła
    float dampedFactor = pow(specularFactor, fShineDamper);

    //złożenie światła zwierciadlanego
    vec3 finalSpecular = dampedFactor * fReflectivity * vLightColor;

    //nałożenie na teksturę i światło rozproszone
    vColor = vec4(diffuse, 1.0) * 
        texture(textureSampler, vTexCoordsFrag) + 
        vec4(finalSpecular, 1.0);  
}
